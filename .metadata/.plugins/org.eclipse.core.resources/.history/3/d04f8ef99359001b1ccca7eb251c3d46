package Steps;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import Core.DriverFactory;
import Page.Page;
import io.qameta.allure.Step;

public class Steps {

	private WebDriver driver;
	Page page = new Page(driver);
	WebDriverWait wait = new WebDriverWait(DriverFactory.getDriver(), 30);
	
	String a = "#search_query_top";
	
	@Step("Dado que eu pesquise um item no campo e busca.")
	public Steps searchItem(String text) throws InterruptedException{
//		wait.wait(10000);
		wait.until(ExpectedConditions.presenceOfElementLocated((By)(page.search2)));
		page.search2.clear();
		page.search2.sendKeys(text);
		page.searchButton.click();
		wait.until(ExpectedConditions.presenceOfElementLocated((By) page.result));
		return this;
	}
	
	@Step("E verifique a quantidade de registros da pesqusa.")
	public Steps verifyItem(){
		page.result.getText();
//		String resultText = DriverFactory.getDriver().findElement(By.cssSelector(result)).getText();
		System.out.println("Resultado pesquisa >>>>> " + page.result.getText());
		Assert.assertEquals("1", page.result.getText());
		return this;
	}
	
	@Step("E seleciono o item desejado.")
	public Steps selectItem(){
		page.item.get(8).click();
//		DriverFactory.getDriver().findElement(By.cssSelector(item[8])).click();
		wait.until(ExpectedConditions.presenceOfElementLocated((By) page.addBasket));
//		wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(addBasket)));
		return this;
	}
	
	@Step("Quando adiciono o item no carrinho.")
	public Steps addToBasket(){
		page.addBasket.click();
//		DriverFactory.getDriver().findElement(By.cssSelector(addBasket)).click();
//		wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(continueButton)));
		wait.until(ExpectedConditions.presenceOfElementLocated((By) page.continueButton));
		page.continueButton.click();
//		DriverFactory.getDriver().findElement(By.cssSelector(continueButton)).click();
//		wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(productBasket)));
		wait.until(ExpectedConditions.presenceOfElementLocated((By) page.product.get(1)));
		return this;
	}
	
	@Step("Então o mesmo deve estar no carrinho.")
	public Steps verifyBasket(){
//		String result = DriverFactory.getDriver().findElement(By.cssSelector(productBasket)).getText();
		System.out.println("Resultado subtotal >>>>> " + page.productBasket.getText());
		Assert.assertEquals("1", page.productBasket.getText());
		return this;
	}	
	
//	@Step("E sigo para o pagamento.")
//	public Steps payment(){
//		String result = DriverFactory.getDriver().findElement(By.cssSelector(productBasket)).getText();
//		System.out.println("Resultado subtotal >>>>> " + DriverFactory.getDriver().findElement(By.cssSelector(productBasket)).getText());
//		Assert.assertEquals("1", result);
//		return this;
//	}	

}
